console.log("Sesion JS01, tipos de datos");

/* Tipos de datos de Js:
    Objetos y Primitibos

    -Primitivos > son inmutables, no tienen atributos ni métodos.
    *string
    *boolean
    *number
    *null
    *undefined
    *bigint
    *symbol

    -Objetos
    Tiene atributo y métodos.
       *tipo object 
        {clave: valor,edad:25, name:"pitufina"   }
        *tipo array
        [elemnt1,elemt2,"pitufinas",38,{},[] ]
    */

/*  ========= Datos primitivos =======  */
/* Tipo de datos string: "hola", 'dia azul'
    - String template lterals `` (backtick)
    Es una forma más flexible y legible de trabajar con cadenas de texto. Utilizan comillas invertidas (``) en lugar de comillas simples o dobles y permiten incrustar exprsiones dentro de la cadena utilizando la interpolación ${} */

    console.log(typeof "hola"); /* string */
    console.log(typeof ""); /* empty string */
    console.log("El resultado de 3x4 = " + (3*4) + " pesos");

/*  La interpolación con ${} en JavaScript es una característica de los Template Literals que permite insertar variables y expresiones dentro de cadenas de texto. Esto se hace envolviendo las expresiones en ${} dentro de una cadena delimitada por comillas invertidas (``).
*/

console.log( `El resultado de 3x4 = ${3*4} pesos` );

/* Tipos de datos number.

-numeros positivos:100,1,0.258
-numero negativos: -1, .50.35
- valores que no pueden ser representados numéricamente: NaN
-valores infinitos: +infinity, -infinity */

console.log(typeof 3.123533 ); /* number */
console.log(typeof (3*3) ); /* number */
console.log(typeof +Infinity ); /* number */
console.log(typeof (-8/0)); /* number */
console.log(typeof (3 + "Vienres tematico")); /* sting */

/*
 Cuando se realizan operaciones que exceden los límites de MAX_SAFE_INTEGER se produce una pérdida de precisión.
 Perdida precisión: No se pueden representar exactamente ciertos valores.
  Típicamente en operaciones de números de punto flotate.
*/
console.log( `Pérdida de precisión: 0.1 + 0. 2 = ${ 0.1 + 0.2 }`) /* 0.30000000000000004 */

/*
 Cuando se realizan operaciones que exceden los límites
 de MAX_SAFE_INTEGER se produce una pérdida de precisión.
 Perdida precisión: No se pueden representar exactamente ciertos valores.
  típicamente en operaciones de números de punto flotate.
*/
console.log( `Pérdida de precisión: 0.1 + 0. 2 = ${ 0.1 + 0.2 }`) //  0.30000000000000004
console.log( `Valor entero seguro en JavaScript: ${Number.MAX_SAFE_INTEGER} `) // 9007199254740991
console.log( `MAX_SAFE_INTEGER + 1: ${Number.MAX_SAFE_INTEGER + 1 }`); 
console.log( `MAX_SAFE_INTEGER + 2: ${Number.MAX_SAFE_INTEGER + 2 }`); 
console.log( `MAX_SAFE_INTEGER + 3: ${Number.MAX_SAFE_INTEGER + 3 }`); 
console.log( `MAX_SAFE_INTEGER + 4: ${Number.MAX_SAFE_INTEGER + 4 }`); 
console.log( `MAX_SAFE_INTEGER + 5: ${Number.MAX_SAFE_INTEGER + 5 }`);

/*
 Tipo de dato undefined
  - Una variable que es declarada, pero el tipo de datos
   no es definido.
*/
let myName;
console.log( typeof myName ); // "undefined"

/*
 Tipo de dato null
  - Una variable que intensionalmente se borra el tipo de dato
  */
  let myAge;
  console.log(`Tipo de dato en myAge ${ typeof myAge}`); // undefied
  myAge = 20;
  console.log(`Tipo de dato en myAge ${ typeof myAge}`); // number
  myAge = null; //intensionalmente se borra el tipo de dato
  
  // NO es correcto usar typeof con un dato null
  console.log(`Tipo de dato en myAge ${ typeof myAge}`); // object 
  console.log(`myAge es null?  ${ myAge === null } `);// true
  /*
  Tipo de dato boolean
  Tiene dos estados: true y false
  */
  const isActive = true;